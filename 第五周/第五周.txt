图像分割
从这个专题开始，讨论的东西变得比较高级
之前讨论的东西都比较基础、历史久远
之后的专题都比较新

二分割：后期特效（After Effects）里，前景和背景的分离，然后换一个背景
多分割：进行可视化，属于同一类的像素点，都标成同一种颜色。不确定多少类

1、根据边缘分割
用sobel算子，可以获得边缘的x梯度和y梯度
边缘的梯度/导数比较大
还有canny算法等，可以得到一个边缘候选集
BW = edge(I, 'canny');
1）又有些边界我们不希望沿着它们进行分割，而是要归为同一类
同一类里面的像素值不一定要比较接近（比如花有红色和黑色的部分）
伪（pseudo）边缘，需要再通过平滑滤波来消去

2、根据区域分割
有些地方没有边界，我们又希望进行分割
比如一个球的边缘和黑暗的背景融为一体。但人可以根据形状脑补出来
这就不能使用边缘分割了

一个全局的边缘连接算法：
霍夫（Hough）变换，让已知的边缘通过直线/圆/其他指定形状，闭合起来

涉及到三个函数：hough,houghpeaks,houghlines。写成脚本hough_test.m
% 0、图像取边缘
I = imread('lena.png');
imggray = rgb2gray(I);
BW = edge(I,'canny');
figure (2)
imshow(BW);
hold on
% 1、hough：输入二值图像BW，角度范围与步进（最大，[-90, 90)）,返回 H-霍夫空间，T-theta，R-p；
[H,T,R] = hough(BW,'Theta',20:0.1:75); 
% 2、houghpeaks：输入霍夫空间和极值数量，返回极值的坐标
PEAKS = houghpeaks(H,5); % NUMPEAKS = 5
% PEAKS = houghpeaks(H,5,'threshold',ceil(0.3*max(H(:))));
% 3、houghlines：返回lines是一个包含图像中线段首末点、p、theta的结构体
LINES = houghlines(BW,T,R,PEAKS); 
% LINES = houghlines(BW,T,R,PEAKS,'FillGap',5,'MinLength',7); 
% 4、用plot函数逐点连接出来
for k=1:length(LINES) 
    xy=[LINES(k).point1;LINES(k).point2]; 
    plot(xy(:,1),xy(:,2),'LineWidth',4); 
end

对于每一个边缘点(x,y)在参数空间上给出一条直线b=xa+y
并把它经过的点（参数空间也需要量化，其精细程度自定）都记录+1 表示被经过过一次
处理完所有边缘点以后 限定对于像素密集的区域 找到被经过的次数最多的一个/一批点 
用它们作为参数在原图中作出直线相交 就拟合出了边缘（只选择直线和候选集的交集，将其变成有限的线段）
使用直线 有分布不均匀和斜率无穷大的问题 改用xcost + ysint = r，参数空间用r和t来表示 计算正弦曲线而不是直线经过的点

也可以用圆来拟合边缘 可以用来数硬币 只是参数空间会变成三维的
而且，可能大概知道这些硬币多大，所以投票时可以只选择某个大小范围内的r

扩展：LSD算法，演示效果非常好、拟合曲线非常平滑
https://www.cnblogs.com/Jessica-jie/p/7512152.html



关于设置阈值进行二值化：要避免阈值过大或过小
全局的阈值自适应 需要两类间有一个明显的波谷
https://img-blog.csdn.net/20171216104427088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzk4MDUyMzc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center
但是噪声可能会让波谷消失

主动轮廓（active contour）类模型，划分图像，将其二值化。它关注区域而不是边缘
Otsu（大津）算法：简单的认为要做的只是二分类，而不是多分类。
可以根据直方图来划分图像。从波谷的地方划断开，可以使得类内方差最小化
但是，波谷也是一个范围，具体要从哪里划断呢？

大津证明了最小化类内方差和最大化类间方差是相同的：最大类间方差+最小类内方差=总方差
由此就可以降低算法复杂度，只需要遍历一次。C代码：
for(t=0;t<256;t++) //遍历求最大的类间方差
{
    //累加求两类类概率密度
    wb+=histogram[t];
    wf=sumPixel-wb;
    if (wb==0||wf==0)
        continue;
    
    //累加求类均值
    sumb+=t*histogram[t];
    sumf=sumW-sumb;
    ub=sumb/wb;
    uf=sumf/wf;
    
    //求当前类间方差
    /* 灰度累计值0~M灰度区间的灰度累计值
    mu = mu1 * omega1 + mu2 * omega2
	类间方差：g = omega1 * (mu - mu1)^2 + omega2 * (mu - mu2)^2
	so: g = omega1 * omega2 * (mu1 - mu2)^2
	*/
    curVal=wb*wf*(ub-uf)*(ub-uf);
    if(curVal>maxVal)
    {
        thred=t;
        maxVal=curVal;
    }
}

matlab直接调用函数 graythresh(I);
I = imread('lena.png');
imggray = rgb2gray(I);
level = graythresh(imggray);
BW = im2bw(imggray,level);
1、因为有噪声等原因，波谷没有那么明显，这样会干扰算法。可以先平滑处理一下
2、如果背景本身也是不均匀的，可以将图像分块，然后分别进行otsu全局方法，对分割有帮助。



交互式图像分割：需要用户的参与
什么是前景，什么是背景，是需要指明的。只需要在上面各划一笔（形状不限）即可，不要求真把边界描出来
称作前景涂抹F和背景涂抹B
程序不知道用户对哪部分感兴趣。而且，PPT给出了这样有趣的图片：
可以看成风景画，此时有背景和前景；
但是，可以把背景的一部分看成一张人脸，可以把它看成前景，而原来的一些前景就成了背景

只提取用户画的那些像素向量（可以是一维或者RGB三维等），做成直方图
一般来说，前景的直方图分布只有一个峰，背景比较多样、有多个峰
可以得到，一个像素x是前景的概率、背景的概率是多少
（这里我有一个问题，如果是一维的灰度图也许还好，但三维的话，样本很稀疏啊？？？）
再将两者作为分母，进行归一化，计算是前景的概率PF(x)
用归一化作为灰度值，画一幅概率图，1表示绝对是前景（白色），0表示绝对是背景（黑色）
这样的效果已经不错了，但是还是不够好：前景里面也有一些地方被标作背景

计算weighted geodesic distance
d(s1, s2) = min ∫ Wds on C(s1, s2) foreach C(s1, s2)
对点s1到点s2的所有曲线，求一个第一类曲线积分，取其中最小的一个
对于离散的情况，就是求带权最短路。
Dijkstra的复杂度本来是O(N^2)，可以优化到O(NlogN+E)，但是视频说可以到线性？？？
点到前景涂抹线的距离，是点到前景涂抹线上每一点中，距离最短的一个
比较DF(x)和DB(x)，哪个代价更小就认为是哪种
具体怎么定义W呢？

如果沿路到前景涂抹的途中，前景概率变化不大（PF(x)的梯度较小），那它就很可能是前景
这样就防止了前景里面也有一些地方被标作背景
以PF(x)为权重，计算每一个像素的梯度，然后？？？
没有对于这个符号进行仔细说明，我也没有查到资料。觉得W就是PF(x)的散度的绝对值？？？

运行完一次后，得到了前景和背景之间的边界；再对边界进行微调
办法同上，只是现在的前景涂抹是第一次计算出的边界小一圈；背景涂抹是大一圈



GraphCut算法：图论和网络流的算法
每个像素点都是一个节点，同时设置两个虚拟节点，一个前景点，一个背景点（跟最大流一样）
它们向每个像素点连有向带权边，权为PF(x)和PB(x)
邻域的像素点之间也连边。同样，需要是A function of the gradient, encouraging similar pixels to stay in the same group.
最简单的，正比于该像素点和邻像素点。

目标：求最小割
最大流
给定指定的一个有向图，其中有两个特殊的点源S(Sources)和汇T(Sinks)，每条边有指定的容量(Capacity)，求满足条件的从S到T的最大流(MaxFlow)。
最小割
割是网络中定点的一个划分，它把网络中的所有顶点划分成两个顶点集合S和T，其中源点s∈S,汇点t∈T。记为CUT(S,T)，满足条件的从S到T的最小割（Min cut）。
有多项式时间的算法。一般，由最大流最小割定理
求解最小割的题目时，就可以用求解最大流的办法来做了。

Adobe使用GraphCut，Microsoft Office使用GrabCut



Mumford-Shah算法
要使得：同一类的像素点之间平滑，不同类像素点之间有明显边缘

用一些平滑的像素点，去近似原图。有一个目标函数
1、约束近似结果和原图之间的偏差，比如均方误差
2、又要让图中的边缘数/分割段数变少
不过，并没有说到如何计数边缘数？应该是像素个数，表示边缘的总长度
因为提到了，原图提取出来的边缘会很复杂，近似于每个像素点都是分割段
另外，怎么近似？并没有明说，只说有人提出了比较优美的模型，进行1&2两点的折中
还涉及到几何微分等工具，这些理论将在下周讨论到
这是不是就是用梯度下降来逼近呢？？？



Active Contour（a.k.a snakes）
用大的曲线先框住目标，然后逐渐调整、收缩，逐步逼近各个目标的边缘
曲线的每个部分的收缩速度都不同，难道也跟梯度下降有关？以后会讲
Adobe Photoshop中的选择工具就是这么实现的，只是点击内部、向外扩散来逼近边缘



Roto Brush：视频软件Adobe AE里自带的视频分割工具，它的大致思想
因为是商用的，1、用户会要求很高精度的分割
2、需要用户参与操作，但是不要太复杂：用户可以调整不满意的局部，而保留剩下部分
3、运算要快，操作结果能即时显示；但是视频的帧数太多了
好在，一般帧与帧之间不会变化太多：shape prior（形状先验）
方法：先找到一帧的边界（可以是算法算出或者用户给出），然后把分割结果向后传。
每一帧对传来的边界进行局部调整（local correction）。
每隔一段时间，要对一个“关键帧”进行划分。如果只划分一帧，误差会越累积越多。
（在NLP领域使用RNN方法的时候，也是要按句子划断的，不然误差累计太大了）
而且，每一帧不仅从上一帧获取信息，还要从最近的“关键帧”获取信息
（然而RNN并不会这么干？？？）

对于边界的每一小段，都有一个局部窗口（local classifier window）
在每个小窗口内，对传来的边界进行调整
首先，利用窗口内的颜色分布作为主导，使用Gaussian Mixture Model，描述前景和背景的概率分布
这就是窗口的作用：全局的颜色分布一般过多过杂，没有参考价值
然后用这个概率分布构造边权，使用GraphCut等算法进行分割
之前的边界作为分类的参考/辅助，在颜色分布很接近的时候发挥主要作用（color-shape integration）

窗口本身也随着边界的移动而移动，这需要对运动进行估计（motion estimation）：
跟non-local mean一样，找到一个跟原来的位置的均方误差最小的邻域，认为是移动后的新窗口

注意Overlapping Color Distribution（叠加着色分布）的问题
前景和背景的颜色相同/相近，也没有明显的边缘（weak boundary）
没有边缘信息；使用区域分割的效果也不一定好（对象不一定是规则的形状）
同时，前景本身是会运动的，其拓扑结构也会变化，不能100%相信算法的Robustness

所以用户的反馈是必要的。用户可以调整不满意的局部，而保留剩下部分
把用户调整过的帧作为“关键帧”，局部的调整效果自动向后传递，让后面的帧随之调整

最后，要把分割出来的边界进行一些平滑处理，以及让帧之间的过渡比较自然

——————————————————————————————————————————————————————————

作业
1. 用Hough Transform侦测日食，需要几个参数？
感觉是3个：太阳和月亮都是圆的，月亮挡住了太阳的一部分或者全部
但是答案只有1 2 4 5。难道是把太阳当作椭圆的？
啊我去，说的是ellipse而不是eclipse……
那的确就是椭圆。一开始想到的是标准方程(x-x0)^2/a^2 + (y-y0)^2/b^2 = 1
以为是4个参数；但是忘记了椭圆不是旋转不变的，还要考虑旋转的情况
圆的一般方程，是x^2+y^2+cx+dy+f=0
三个未知数，所以要三个点确定。
椭圆的一般方程，是ax^2+by^2+cx+dy+exy+f=0（二次曲线）
看起来有6个未知数，但是两边都除以a，就是只有5个了。所以需要5个点

2. 目测出来直方图是三个高斯分布的组合（trimodal distribution）
该怎么使用二分类的Otsu算法呢？
My guess: First use Otsu's method once to divide the histogram into 2 halves, and 2 more times to deal with each half, only retaining the better attempt. Now the histogram is divided into 3 parts.

5. How would you combine Otsu’s algorithm with Mumford-Shah concepts to design a segmentation algorithm that considers both ideas simultaneously?

Add a length term to Otsu’s algorithm penalty function and perform brute-force search for the optimal threshold that minimizes the new penalty.

用霍夫变换检测直线我们已经知道该怎么做了，有现成的函数
但是如果要检测圆、椭圆，只能自己写函数
检测圆的脚本记作hough_circle.m和hough_circle_test.m

检测椭圆的话，除了椭圆圆心，还涉及决定离心率和大小的a、b，以及倾斜角度
同时检测圆和直线的话，把两个参数空间放在一起计数就好了

还提到了对于Mumford-Shah算法的实现：
从感兴趣对象（前景）内的一组点开始（表示为种子）
递归地添加相邻像素，只要它们处于种子的像素值的预定义范围内。
考虑一个惩罚项，考虑到该区域的平均灰度值（及其产生的误差）以及该区域随着其增长而产生的新长度。

感觉还是似懂非懂……？？？